package storage

import (
	"context"
	"time"
)

// Storage - это обобщенный интерфейс хранилища данных, поддерживающий операции
// key-value и работу с очередями.
// Параметр типа T позволяет работать с любыми типами данных.
type Storage[T any] interface {
	// Операции с ключами и значениями

	// Set сохраняет значение по указанному ключу с заданным временем жизни (TTL)
	// ctx - контекст для управления временем выполнения
	// key - ключ для сохранения значения
	// value - сохраняемое значение
	// ttl - время жизни записи (0 - бессрочно)
	// Возвращает ошибку в случае неудачи
	Set(ctx context.Context, key string, value T, ttl time.Duration) error

	// Get получает значение по ключу
	// ctx - контекст для управления временем выполнения
	// key - ключ для получения значения
	// Возвращает:
	//   - значение (или нулевое значение типа T, если не найдено)
	//   - флаг наличия значения (true - найдено, false - не найдено)
	//   - ошибку (если возникла)
	Get(ctx context.Context, key string) (T, bool, error)

	// Delete удаляет значение по ключу
	// ctx - контекст для управления временем выполнения
	// key - ключ для удаления
	// Возвращает ошибку в случае неудачи
	Delete(ctx context.Context, key string) error

	// Close освобождает ресурсы хранилища
	// Должен вызываться при завершении работы
	// Возвращает ошибку в случае неудачи
	Close() error

	// Операции с очередями

	// Enqueue добавляет элемент в конец очереди
	// ctx - контекст для управления временем выполнения
	// queueName - имя очереди
	// value - значение для добавления
	// Возвращает ошибку в случае неудачи
	Enqueue(ctx context.Context, queueName string, value T) error

	// Dequeue извлекает и удаляет элемент из начала очереди
	// ctx - контекст для управления временем выполнения
	// queueName - имя очереди
	// Возвращает:
	//   - извлеченное значение (или нулевое значение типа T, если очередь пуста)
	//   - флаг наличия элемента (true - элемент извлечен, false - очередь пуста)
	//   - ошибку (если возникла)
	Dequeue(ctx context.Context, queueName string) (T, bool, error)

	// Peek просматривает элемент в начале очереди без его удаления
	// ctx - контекст для управления временем выполнения
	// queueName - имя очереди
	// Возвращает:
	//   - первый элемент (или нулевое значение типа T, если очередь пуста)
	//   - флаг наличия элемента (true - элемент существует, false - очередь пуста)
	//   - ошибку (если возникла)
	Peek(ctx context.Context, queueName string) (T, bool, error)

	// Remove удаляет элемент из начала очереди без его возврата
	// ctx - контекст для управления временем выполнения
	// queueName - имя очереди
	// Возвращает:
	//   - флаг успешности операции (true - элемент удален, false - очередь пуста)
	//   - ошибку (если возникла)
	Remove(ctx context.Context, queueName string) (bool, error)

	// QueueLen возвращает текущее количество элементов в очереди
	// ctx - контекст для управления временем выполнения
	// queueName - имя очереди
	// Возвращает:
	//   - количество элементов в очереди (0 если очередь пуста или не существует)
	//   - ошибку (если возникла)
	QueueLen(ctx context.Context, queueName string) (int64, error)
}

// RedisConfig содержит параметры подключения к Redis
type RedisConfig struct {
	Addr     string // Адрес сервера Redis (например, "localhost:6379")
	Password string // Пароль для аутентификации (пустая строка если не требуется)
	DB       int    // Номер базы данных
}

// NewMemory создает новое in-memory хранилище
// cleanupInterval - интервал очистки устаревших записей
// Возвращает:
//   - реализацию интерфейса Storage[T]
//   - ошибку (в текущей реализации всегда nil)
func NewMemory[T any](cleanupInterval time.Duration) (Storage[T], error) {
	return newMemoryStorage[T](cleanupInterval), nil
}

// NewRedis создает новое хранилище на основе Redis
// config - конфигурация подключения к Redis
// Возвращает:
//   - реализацию интерфейса Storage[T]
//   - ошибку, если подключение не удалось
func NewRedis[T any](config RedisConfig) (Storage[T], error) {
	return newRedisStorage[T](config)
}
